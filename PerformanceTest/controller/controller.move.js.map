{"version":3,"sources":["script.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controller.move.js","sourcesContent":["window.Rendxx = window.Rendxx || {};\r\nwindow.Rendxx.Game = window.Rendxx.Game || {};\r\nwindow.Rendxx.Game.Client = window.Rendxx.Game.Client || {};\r\nwindow.Rendxx.Game.Client.Controller = window.Rendxx.Game.Client.Controller || {};\r\n\r\n/*\r\n * Controller.Move\r\n * This is a control handler for mobile. \r\n * User can move the handler in a circle or tap it.\r\n * Support only 1 touch point\r\n * \r\n * 3 callback:\r\n * Output the offset from center in 2 format (x,y / degree,strength)\r\n * onMove: \r\n * ({\r\n *      x: [int]            (0 - 100)\r\n *      y: [int]            (0 - 100)\r\n *      degree: [degree]    (-180 - 180, top is 0)\r\n * })\r\n * \r\n * onTap()\r\n * onStop()\r\n */\r\n\r\n(function (Controller) {\r\n    \"use strict\";\r\n    var HTML = {\r\n        wrap: '<div class=\"controller-move\"></div>',\r\n        base: '<div class=\"_base\"></div>',\r\n        point: '<div class=\"_point\"></div>',\r\n        handlerBase: '<div class=\"_handler_base\"></div>',\r\n        handler: '<div class=\"_handler\"></div>'\r\n    };\r\n\r\n    var cssClass = {\r\n        visible: '_visible',\r\n        brief: '_brief'\r\n    };\r\n\r\n    var Env = {\r\n        moveThreshold: 10          // any moving not pass this threshold will not be recognized\r\n    };\r\n\r\n    var Move = function (opts) {\r\n        // private property ---------------------------------------------\r\n        var that = this,\r\n            // parameters\r\n            _css = null,\r\n            _threshold = Env.moveThreshold,\r\n            // html\r\n            html_container = null,\r\n            html_wrap = null,\r\n            html_base = null,\r\n            html_handler = null,\r\n            html_handlerBase = null,\r\n            // data\r\n            animationId = null,\r\n            text = null,\r\n            range= null,\r\n            base_offset_x = null,\r\n            base_offset_y = null,\r\n            identifier = null,\r\n            cache_x = null,\r\n            cache_y = null,\r\n            pos_x = null,\r\n            pos_y = null,\r\n            isBrief = null,\r\n            // flag\r\n            enabled = false,\r\n            using = false,\r\n            tapTime = null;\r\n\r\n        // callback ---------------------------------------------\r\n        this.onStop = null;\r\n        this.onMove = null;\r\n        this.onTap = null;\r\n\r\n        // public function ---------------------------------------------\r\n        this.show = function (opts) {\r\n            if (opts != null) _setOpts(opts);\r\n            html_base.attr('data-content', text);\r\n            html_wrap.show();\r\n\r\n            var rect = html_wrap[0].getBoundingClientRect()\r\n            base_offset_x = rect.left;\r\n            base_offset_y = rect.top;\r\n            enabled = true;\r\n            showHandle();\r\n        };\r\n\r\n        this.hide = function () {\r\n            enabled = false;\r\n            html_wrap.hide();\r\n            if (using && that.onStop) that.onStop();\r\n            using = false;\r\n            removeAnimation();\r\n        };\r\n\r\n        this.resize = function () {\r\n            // data\r\n            range = html_base.width();\r\n\r\n            // css\r\n            html_wrap.css(_css);\r\n            html_base.css({\r\n                'width': html_wrap.width() - 20,\r\n                'height': html_wrap.height() - 20,\r\n                'top': '10px',\r\n                'left': '10px'\r\n            });\r\n\r\n            if (isBrief === true) {\r\n                html_wrap.addClass(cssClass.brief);\r\n            } else {\r\n                html_wrap.removeClass(cssClass.brief);\r\n            }\r\n        };\r\n\r\n        // private function ---------------------------------------------\r\n\r\n        // update handle position\r\n        var showHandle = function () {\r\n            if (pos_x !== null) {\r\n                html_handler.css({\r\n                    top: pos_y + 'px',\r\n                    left: pos_x + 'px'\r\n                });\r\n            } \r\n\r\n            //animationId = requestAnimationFrame(showHandle);\r\n        };\r\n\r\n        // clear handler animation\r\n        var removeAnimation = function () {\r\n            //if (animationId !== null) cancelAnimationFrame(animationId);\r\n            animationId = null;\r\n        };\r\n\r\n        // output move result\r\n        var output = function (x, y, degree) {\r\n            if (that.onMove != null) that.onMove({\r\n                x: Math.floor(x * 100 / range),\r\n                y: Math.floor(y * 100 / range),\r\n                degree: Math.floor(degree * 180 / Math.PI)\r\n            });\r\n\r\n            if (!isBrief) {\r\n                showHandle();\r\n            }\r\n            //console.log(x + \" , \" + y)\r\n        };\r\n\r\n        // move handle\r\n        var move = function (x_in, y_in) {\r\n            var x = x_in - cache_x;\r\n            var y = cache_y - y_in;\r\n\r\n            var strength = Math.sqrt(x * x + y * y);\r\n            if (strength > _threshold) {\r\n                tapTime = null;\r\n            }\r\n            if (strength > _threshold) {\r\n                var degree = Math.atan2(x, y);\r\n                output(x, y, degree);\r\n            }\r\n        };\r\n\r\n        // try starting moving handle\r\n        var _startMove = function (touch) {\r\n            if (identifier !== null) return;\r\n            identifier = touch.identifier;\r\n            cache_x = touch.clientX;\r\n            cache_y = touch.clientY;\r\n            if (isBrief) return;\r\n            html_handlerBase.css({\r\n                top: touch.clientY - base_offset_y + 'px',\r\n                left: touch.clientX - base_offset_x + 'px'\r\n            });\r\n            html_handler.css({\r\n                top: touch.clientY - base_offset_y + 'px',\r\n                left: touch.clientX - base_offset_x + 'px'\r\n            });\r\n            html_handlerBase.addClass(cssClass.visible);\r\n            html_handler.addClass(cssClass.visible);\r\n        };\r\n\r\n        // setup ---------------------------------------------\r\n        var _setupFunc = function () {\r\n            html_wrap[0].addEventListener('touchstart', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                _startMove(event.changedTouches[0]);\r\n                tapTime = (new Date()).getTime();\r\n            }, false);\r\n\r\n            html_wrap[0].addEventListener('touchmove', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                using = true;\r\n                for (var i = 0; i < event.changedTouches.length; i++) {\r\n                    var touch = event.changedTouches[i];\r\n                    if (touch.identifier == identifier) {\r\n                        pos_x = touch.clientX - base_offset_x;\r\n                        pos_y = touch.clientY - base_offset_y;\r\n                        move(touch.clientX, touch.clientY);\r\n                        break;\r\n                    }\r\n                }\r\n            }, false);\r\n\r\n            html_wrap[0].addEventListener('touchend', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                for (var i = 0; i < event.changedTouches.length; i++) {\r\n                    var touch = event.changedTouches[i];\r\n                    if (touch.identifier == identifier) {\r\n                        if (tapTime != null && (new Date()).getTime() - tapTime < 300) {\r\n                            if (that.onTap) that.onTap();\r\n                        };\r\n                        tapTime = null;\r\n                        identifier = null;\r\n                        using = false;\r\n                        if (that.onStop) that.onStop();\r\n                        pos_x = pos_y = null;\r\n                        if (isBrief) break;\r\n                        html_handlerBase.removeClass(cssClass.visible);\r\n                        html_handler.removeClass(cssClass.visible);\r\n                        break;\r\n                    }\r\n                }\r\n            }, false);\r\n        };\r\n\r\n        var _setupHtml = function () {\r\n            // html\r\n            html_wrap = $(HTML.wrap).appendTo(html_container);\r\n            html_base = $(HTML.base).appendTo(html_wrap);\r\n            html_handlerBase = $(HTML.handlerBase).appendTo(html_wrap);\r\n            html_handler = $(HTML.handler).appendTo(html_wrap);\r\n            that.resize();\r\n        };\r\n\r\n        var _setOpts = function (opts) {\r\n            if (opts.threshold) _threshold = opts.threshold;\r\n            if (opts.css) _css = opts.css;\r\n            if (opts.text) text = opts.text;\r\n            if (opts.isBrief === true) {\r\n                isBrief = true;\r\n                if (html_wrap != null) html_wrap.addClass(cssClass.brief);\r\n            } else {\r\n                isBrief = false;\r\n                if (html_wrap != null) html_wrap.removeClass(cssClass.brief);\r\n            }\r\n        };\r\n\r\n        var _init = function (opts) {\r\n            if (opts == null) throw new Error(\"Option can not be empty\");\r\n            html_container = opts.container;\r\n            _setOpts(opts);\r\n            _setupHtml();\r\n            _setupFunc();\r\n            that.hide();\r\n        };\r\n        _init(opts);\r\n    };\r\n    Controller.Move = Move;\r\n    Controller.Move.Env = Env;\r\n})(window.Rendxx.Game.Client.Controller);"],"sourceRoot":"/source/"}