{"version":3,"sources":["script.js"],"names":["window","Rendxx","Game","Client","Controller","HTML","wrap","base","point","handlerBase","handler","cssClass","visible","brief","Env","moveThreshold","Move","opts","that","this","_css","_threshold","html_container","html_wrap","html_base","html_handler","html_handlerBase","animationId","text","range","base_offset_x","base_offset_y","identifier","cache_x","cache_y","pos_x","pos_y","isBrief","enabled","using","tapTime","onStop","onMove","onTap","show","_setOpts","attr","rect","getBoundingClientRect","left","top","showHandle","hide","removeAnimation","resize","width","css","height","addClass","removeClass","output","x","y","degree","Math","floor","PI","move","x_in","y_in","strength","sqrt","atan2","_startMove","touch","clientX","clientY","_setupFunc","addEventListener","event","preventDefault","changedTouches","Date","getTime","i","length","_setupHtml","$","appendTo","threshold","_init","Error","container"],"mappings":"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","file":"controller.move.min.js","sourcesContent":["window.Rendxx = window.Rendxx || {};\r\nwindow.Rendxx.Game = window.Rendxx.Game || {};\r\nwindow.Rendxx.Game.Client = window.Rendxx.Game.Client || {};\r\nwindow.Rendxx.Game.Client.Controller = window.Rendxx.Game.Client.Controller || {};\r\n\r\n/*\r\n * Controller.Move\r\n * This is a control handler for mobile. \r\n * User can move the handler in a circle or tap it.\r\n * Support only 1 touch point\r\n * \r\n * 3 callback:\r\n * Output the offset from center in 2 format (x,y / degree,strength)\r\n * onMove: \r\n * ({\r\n *      x: [int]            (0 - 100)\r\n *      y: [int]            (0 - 100)\r\n *      degree: [degree]    (-180 - 180, top is 0)\r\n * })\r\n * \r\n * onTap()\r\n * onStop()\r\n */\r\n\r\n(function (Controller) {\r\n    \"use strict\";\r\n    var HTML = {\r\n        wrap: '<div class=\"controller-move\"></div>',\r\n        base: '<div class=\"_base\"></div>',\r\n        point: '<div class=\"_point\"></div>',\r\n        handlerBase: '<div class=\"_handler_base\"></div>',\r\n        handler: '<div class=\"_handler\"></div>'\r\n    };\r\n\r\n    var cssClass = {\r\n        visible: '_visible',\r\n        brief: '_brief'\r\n    };\r\n\r\n    var Env = {\r\n        moveThreshold: 10          // any moving not pass this threshold will not be recognized\r\n    };\r\n\r\n    var Move = function (opts) {\r\n        // private property ---------------------------------------------\r\n        var that = this,\r\n            // parameters\r\n            _css = null,\r\n            _threshold = Env.moveThreshold,\r\n            // html\r\n            html_container = null,\r\n            html_wrap = null,\r\n            html_base = null,\r\n            html_handler = null,\r\n            html_handlerBase = null,\r\n            // data\r\n            animationId = null,\r\n            text = null,\r\n            range= null,\r\n            base_offset_x = null,\r\n            base_offset_y = null,\r\n            identifier = null,\r\n            cache_x = null,\r\n            cache_y = null,\r\n            pos_x = null,\r\n            pos_y = null,\r\n            isBrief = null,\r\n            // flag\r\n            enabled = false,\r\n            using = false,\r\n            tapTime = null;\r\n\r\n        // callback ---------------------------------------------\r\n        this.onStop = null;\r\n        this.onMove = null;\r\n        this.onTap = null;\r\n\r\n        // public function ---------------------------------------------\r\n        this.show = function (opts) {\r\n            if (opts != null) _setOpts(opts);\r\n            html_base.attr('data-content', text);\r\n            html_wrap.show();\r\n\r\n            var rect = html_wrap[0].getBoundingClientRect()\r\n            base_offset_x = rect.left;\r\n            base_offset_y = rect.top;\r\n            enabled = true;\r\n            showHandle();\r\n        };\r\n\r\n        this.hide = function () {\r\n            enabled = false;\r\n            html_wrap.hide();\r\n            if (using && that.onStop) that.onStop();\r\n            using = false;\r\n            removeAnimation();\r\n        };\r\n\r\n        this.resize = function () {\r\n            // data\r\n            range = html_base.width();\r\n\r\n            // css\r\n            html_wrap.css(_css);\r\n            html_base.css({\r\n                'width': html_wrap.width() - 20,\r\n                'height': html_wrap.height() - 20,\r\n                'top': '10px',\r\n                'left': '10px'\r\n            });\r\n\r\n            if (isBrief === true) {\r\n                html_wrap.addClass(cssClass.brief);\r\n            } else {\r\n                html_wrap.removeClass(cssClass.brief);\r\n            }\r\n        };\r\n\r\n        // private function ---------------------------------------------\r\n\r\n        // update handle position\r\n        var showHandle = function () {\r\n            if (pos_x !== null) {\r\n                html_handler.css({\r\n                    top: pos_y + 'px',\r\n                    left: pos_x + 'px'\r\n                });\r\n            } \r\n\r\n            //animationId = requestAnimationFrame(showHandle);\r\n        };\r\n\r\n        // clear handler animation\r\n        var removeAnimation = function () {\r\n            //if (animationId !== null) cancelAnimationFrame(animationId);\r\n            animationId = null;\r\n        };\r\n\r\n        // output move result\r\n        var output = function (x, y, degree) {\r\n            if (that.onMove != null) that.onMove({\r\n                x: Math.floor(x * 100 / range),\r\n                y: Math.floor(y * 100 / range),\r\n                degree: Math.floor(degree * 180 / Math.PI)\r\n            });\r\n\r\n            if (!isBrief) {\r\n                showHandle();\r\n            }\r\n            //console.log(x + \" , \" + y)\r\n        };\r\n\r\n        // move handle\r\n        var move = function (x_in, y_in) {\r\n            var x = x_in - cache_x;\r\n            var y = cache_y - y_in;\r\n\r\n            var strength = Math.sqrt(x * x + y * y);\r\n            if (strength > _threshold) {\r\n                tapTime = null;\r\n            }\r\n            if (strength > _threshold) {\r\n                var degree = Math.atan2(x, y);\r\n                output(x, y, degree);\r\n            }\r\n        };\r\n\r\n        // try starting moving handle\r\n        var _startMove = function (touch) {\r\n            if (identifier !== null) return;\r\n            identifier = touch.identifier;\r\n            cache_x = touch.clientX;\r\n            cache_y = touch.clientY;\r\n            if (isBrief) return;\r\n            html_handlerBase.css({\r\n                top: touch.clientY - base_offset_y + 'px',\r\n                left: touch.clientX - base_offset_x + 'px'\r\n            });\r\n            html_handler.css({\r\n                top: touch.clientY - base_offset_y + 'px',\r\n                left: touch.clientX - base_offset_x + 'px'\r\n            });\r\n            html_handlerBase.addClass(cssClass.visible);\r\n            html_handler.addClass(cssClass.visible);\r\n        };\r\n\r\n        // setup ---------------------------------------------\r\n        var _setupFunc = function () {\r\n            html_wrap[0].addEventListener('touchstart', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                _startMove(event.changedTouches[0]);\r\n                tapTime = (new Date()).getTime();\r\n            }, false);\r\n\r\n            html_wrap[0].addEventListener('touchmove', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                using = true;\r\n                for (var i = 0; i < event.changedTouches.length; i++) {\r\n                    var touch = event.changedTouches[i];\r\n                    if (touch.identifier == identifier) {\r\n                        pos_x = touch.clientX - base_offset_x;\r\n                        pos_y = touch.clientY - base_offset_y;\r\n                        move(touch.clientX, touch.clientY);\r\n                        break;\r\n                    }\r\n                }\r\n            }, false);\r\n\r\n            html_wrap[0].addEventListener('touchend', function (event) {\r\n                event.preventDefault();\r\n                if (!enabled) return;\r\n                for (var i = 0; i < event.changedTouches.length; i++) {\r\n                    var touch = event.changedTouches[i];\r\n                    if (touch.identifier == identifier) {\r\n                        if (tapTime != null && (new Date()).getTime() - tapTime < 300) {\r\n                            if (that.onTap) that.onTap();\r\n                        };\r\n                        tapTime = null;\r\n                        identifier = null;\r\n                        using = false;\r\n                        if (that.onStop) that.onStop();\r\n                        pos_x = pos_y = null;\r\n                        if (isBrief) break;\r\n                        html_handlerBase.removeClass(cssClass.visible);\r\n                        html_handler.removeClass(cssClass.visible);\r\n                        break;\r\n                    }\r\n                }\r\n            }, false);\r\n        };\r\n\r\n        var _setupHtml = function () {\r\n            // html\r\n            html_wrap = $(HTML.wrap).appendTo(html_container);\r\n            html_base = $(HTML.base).appendTo(html_wrap);\r\n            html_handlerBase = $(HTML.handlerBase).appendTo(html_wrap);\r\n            html_handler = $(HTML.handler).appendTo(html_wrap);\r\n            that.resize();\r\n        };\r\n\r\n        var _setOpts = function (opts) {\r\n            if (opts.threshold) _threshold = opts.threshold;\r\n            if (opts.css) _css = opts.css;\r\n            if (opts.text) text = opts.text;\r\n            if (opts.isBrief === true) {\r\n                isBrief = true;\r\n                if (html_wrap != null) html_wrap.addClass(cssClass.brief);\r\n            } else {\r\n                isBrief = false;\r\n                if (html_wrap != null) html_wrap.removeClass(cssClass.brief);\r\n            }\r\n        };\r\n\r\n        var _init = function (opts) {\r\n            if (opts == null) throw new Error(\"Option can not be empty\");\r\n            html_container = opts.container;\r\n            _setOpts(opts);\r\n            _setupHtml();\r\n            _setupFunc();\r\n            that.hide();\r\n        };\r\n        _init(opts);\r\n    };\r\n    Controller.Move = Move;\r\n    Controller.Move.Env = Env;\r\n})(window.Rendxx.Game.Client.Controller);"],"sourceRoot":"/source/"}